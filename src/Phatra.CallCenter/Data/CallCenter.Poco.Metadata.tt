<#
//*********************************************************
//
//   Last Updated: 1630 08 MAR 2011
//
//*********************************************************
#>
<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ output extension=".cs"#><#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

//***************************************************************
//***************** BEGIN Template Settings *********************
//***************************************************************

// This needs to be set to the .edmx file that you want to process.
string edmxFile = @"..\EF\CallCenterEdm.edmx";

// answers the question: Force generation of file even if the code file exists?
bool forceCodeGeneration = true;

//***************************************************************
//***************** END Template Settings ***********************
//***************************************************************

this.Log(string.Format("Edmx File: {0}", edmxFile));

EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(edmxFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

// Emit Entity Types
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
	string fileName = string.Format("{0}.Metadata.cs", PascalCaseProperty(entity.Name));
	if(!DoesFileExist(fileName, forceCodeGeneration))	
	{			
		fileManager.StartNewFile(this.LogFile(fileName));
		WriteHeader();		
#>

<#
		BeginNamespace(namespaceName, code);		
		bool entityHasNullableFKs = entity.NavigationProperties.Any(np => np.GetDependentProperties().Any(p=>ef.IsNullable(p)));		
#>
[MetadataType(typeof(Metadata))]
<#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#>partial class <#=PascalCaseProperty(code.Escape(entity))#><#=code.StringBefore(" : ", code.Escape(entity.BaseType))#>
{
<# region.Begin("Metadata"); #>

	/// <summary>
	/// Metadata internal class used for Data Annotations
	/// </summary>
	internal class Metadata
    {
<#	
		region.Begin("Primitive Properties");
		PushIndent(CodeRegion.GetIndent(2));	
		foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
		{
			bool isForeignKey = entity.NavigationProperties.Any(np=>np.GetDependentProperties().Contains(edmProperty));
			bool isDefaultValueDefinedInModel = (edmProperty.DefaultValue != null);			
#>

<#= this.WriteAttributes(edmProperty) #>	
<#=PropertyVirtualModifier(Accessibility.ForProperty(edmProperty))#> <#=code.Escape(edmProperty.TypeUsage)#> <#=PascalCaseProperty(code.Escape(edmProperty))#> { get; set; }	
<#
		}
		PopIndent();
		region.End();
#>

<#
		region.Begin("Complex Properties");
		PushIndent(CodeRegion.GetIndent(2));

		foreach(EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == entity))
		{
#>

<#= this.WriteAttributes(edmProperty) #>
<#=PropertyVirtualModifier(Accessibility.ForProperty(edmProperty))#> <#=code.Escape(edmProperty.TypeUsage)#> <#=PascalCaseProperty(code.Escape(edmProperty))#> { get; set; }
<#
		}
		PopIndent();
		region.End();
#>

<#
		////////
		//////// Write Navigation properties -------------------------------------------------------------------------------------------
		////////
		
		region.Begin("Navigation Properties");
		PushIndent(CodeRegion.GetIndent(2));

		foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(np => np.DeclaringType == entity))
		{
			NavigationProperty inverse = ef.Inverse(navProperty);
			if (inverse != null &&  !IsReadWriteAccessibleProperty(inverse))
			{
				inverse = null;
			}
#>
<#
			if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
			{
#>
	
<#=PropertyVirtualModifier(Accessibility.ForReadOnlyProperty(navProperty))#> ICollection<<#=PascalCaseProperty(code.Escape(navProperty.ToEndMember.GetEntityType()))#>> <#=PascalCaseProperty(code.Escape(navProperty))#> { get; set; }
<#
			}
			else
			{
#>
	
<#=PropertyVirtualModifier(Accessibility.ForProperty(navProperty))#> <#=PascalCaseProperty(code.Escape(navProperty.ToEndMember.GetEntityType()))#> <#=PascalCaseProperty(code.Escape(navProperty))#> { get; set; }
<#
			}
		}
		PopIndent();
		region.End();
#>
	}
<# region.End(); #>
}
<#
    	EndNamespace(namespaceName);
	}
	else
	{
		fileManager.StartNewFile(this.LogFile(fileName));
		this.Write(OutputFile(fileName));
	}
}

foreach (ComplexType complex in ItemCollection.GetItems<ComplexType>().OrderBy(e => e.Name))
{
	string fileName = string.Format("{0}.Metadata.cs", complex.Name);
	if(!DoesFileExist(fileName, forceCodeGeneration))	
	{	
		fileManager.StartNewFile(this.LogFile(fileName));
		WriteHeader();		
#>

<# 		BeginNamespace(namespaceName, code); #>
[MetadataType(typeof(Metadata))] 
<#=Accessibility.ForType(complex)#> partial class <#=PascalCaseProperty(code.Escape(complex))#>
{
<# region.Begin("Metadata"); #>

	/// <summary>
	/// Metadata internal class used for Data Annotations
	/// </summary>
	internal class Metadata
    {
<#
		region.Begin("Primitive Properties");
		PushIndent(CodeRegion.GetIndent(2));

		foreach(EdmProperty edmProperty in complex.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == complex))
		{
			bool isDefaultValueDefinedInModel = (edmProperty.DefaultValue != null);
#>

<#= this.WriteAttributes(edmProperty) #>
<#=Accessibility.ForProperty(edmProperty)#> <#=code.Escape(edmProperty.TypeUsage)#> <#=PascalCaseProperty(code.Escape(edmProperty))#> { get; set; }
<#
		}
		PopIndent();
		region.End();

		region.Begin("Complex Properties");
		PushIndent(CodeRegion.GetIndent(2));
		
		foreach(EdmProperty edmProperty in complex.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == complex))
		{
#>

<#= this.WriteAttributes(edmProperty) #>
<#=Accessibility.ForProperty(edmProperty)#> <#=code.Escape(edmProperty.TypeUsage)#> <#=PascalCaseProperty(code.Escape(edmProperty))#> { get; set; }
<#
		}
		PopIndent();
		region.End();
#>
	}
<# region.End(); #>
}
<#
    	EndNamespace(namespaceName);
	}
	else
	{
		fileManager.StartNewFile(this.LogFile(fileName));
		this.Write(OutputFile(fileName));
	}
}


if (!VerifyTypesAreCaseInsensitiveUnique(ItemCollection))
{
    return "";
}
#>
<#
this.Log(Environment.NewLine);
fileManager.StartNewFile(GetLogFileName());
#>
<#= this.WriteLog() #>
<#	fileManager.Process(); #>

<#+
void WriteHeader()
{
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
<#+
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

bool IsReadWriteAccessibleProperty(EdmMember member)
{
    string setter = Accessibility.ForWriteOnlyProperty(member);
    string getter = Accessibility.ForReadOnlyProperty(member);

    return getter != "private" && getter != "protected" && setter != "private" && setter != "protected";
}

string PropertyVirtualModifier(string accessibility)
{
    return accessibility + (accessibility != "private" ? " virtual" : "");
}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    Dictionary<string, bool> alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(StructuralType type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }

    }

    return true;
}

/// <summary>
/// Returns the passed in identifier with the first letter changed to uppercase
/// </summary>
string PascalCaseProperty(string identifier) {
	if (String.IsNullOrEmpty(identifier)) {
		return identifier;
	}
	 
	string returnString = identifier;
	 
	// If there is an underscore anywhere within the identifier 
	// strip them out upper casing the first letter 
	if (identifier.IndexOf("_") >= 0) {
					
		returnString = string.Empty;
			
		string[] propertySplit = identifier.Split('_');
							
		if (propertySplit != null) {
			for (int j = 0; j < propertySplit.Length; j++) {
				if (!string.IsNullOrEmpty(propertySplit[j])) {
					returnString += propertySplit[j].Substring(0, 1).ToString(CultureInfo.InvariantCulture).ToUpperInvariant();
					returnString += propertySplit[j].Substring(1);										
				}					
			}
		}			
	}
	else {
		returnString = identifier.Substring(0, 1).ToString(CultureInfo.InvariantCulture).ToUpperInvariant();
		returnString += identifier.Substring(1);
	}
	/*
	// Find out if the last two letters are ID
	string returnStringID = returnString.Substring(returnString.Length - 2);
	 
	if (returnStringID.ToLower() == "id") {
		returnString = returnString.Substring(0, returnString.Length - 2) + "ID";
	}
	*/
	 
	return returnString;
}	


#>

<#+
bool IsUpperCase(string inputString)
{
    return System.Text.RegularExpressions.Regex.IsMatch(inputString, "^[A-Z]+$");
}

/// <summary>
/// Reformats the passed string from camelCase to Proper Case
/// </summary>
/// <param name="inputString">The string to reformat to proper case</param>
/// <returns></returns>
string ParseCamelToProper(string inputString)
{
	inputString = PascalCaseProperty(inputString);
    if (this.IsUpperCase(inputString)) return inputString;
    if (string.IsNullOrEmpty(inputString)) return string.Empty;

    var letters = inputString.ToCharArray();
    var sb = new System.Text.StringBuilder();
    int index = 0;
    if (inputString.Contains("ID"))
    {
        sb.Append(letters[0]);
        sb.Append(inputString.Substring(1, (inputString.Length - 1)));
    }
    else
    {
        foreach (var c in letters)
        {
            if (index == 0)
                sb.AppendFormat(" {0}", c.ToString().ToUpper());
            else if (char.IsUpper(c))
                sb.AppendFormat(" {0}", c);
            else
                sb.Append(c);

            index += 1;
        }
    }
    return System.Text.RegularExpressions.Regex.Replace(sb.ToString().Trim(), "(?<=[A-Z]) (?=[A-Z])", string.Empty);
}

/// <summary>
/// Adds Model attributes (System.ComponentModel.DataAnnotations) to the POCO.
/// </summary>
/// <returns></returns>
string WriteAttributes(EdmMember member)
{
	CodeGenerationTools code = new CodeGenerationTools(this);	
	var sb = new System.Text.StringBuilder();
	
	// available facets: Nullable, MaxLength, DefaultValue, Unicode, FixedLength
	
	// DisplayAttribute
	string displayName = this.ParseCamelToProper(code.Escape(member));
	sb.AppendFormat("[Display(Name = \"{0}\")]", displayName);
	
	//RequiredAttribute
	bool isNullable = true;
	if(bool.TryParse(member.TypeUsage.Facets["Nullable"].Value.ToString(), out isNullable))
	{
		if(!isNullable)
		{
			sb.AppendLine();
			sb.AppendFormat("[Required(ErrorMessage = \"{0} is Required.\")]", displayName);
		}
	}
	
	// StringLengthAttribute
	if(string.Compare(code.Escape(member.TypeUsage), "string", StringComparison.InvariantCultureIgnoreCase) == 0)
	{
		if (member.TypeUsage.Facets["MaxLength"].Value != null)
		{
			if (member.TypeUsage.Facets["MaxLength"].Value.ToString() != "Max")
			{
				int maxLength = 0;
				if(int.TryParse(member.TypeUsage.Facets["MaxLength"].Value.ToString(), out maxLength))
				{
					sb.AppendLine();
					sb.AppendFormat("[StringLength({0}, ErrorMessage = \"{1} must be under {0} characters.\")]", maxLength, displayName);
				}	
			}
		}
	
	}
	
	return sb.ToString();
}
#>

<#+
bool DoesFileExist(string filename, bool forceCodeGeneration)
{
	if(forceCodeGeneration) return false;
	return File.Exists(Path.Combine(GetCurrentDirectory(),filename));
}

string OutputFile(string filename)
{
	using(StreamReader sr = new StreamReader(Path.Combine(GetCurrentDirectory(),filename)))
	{
		string contents = sr.ReadToEnd();
		return contents;
	}
}

string GetCurrentDirectory()
{
	string executingDirectoryName = "";
	string stackTraceFileName = new StackTrace(true).GetFrame(0).GetFileName();
	if (String.IsNullOrEmpty(stackTraceFileName))
	{
		throw new ArgumentException("No value was specified for the 'directoryName' configuration parameter" +
			", and we could not figure out the file name from the stack trace (most likely because of running " +
			"the template with debug='False' specified in the <\u0023@ template \u0023> directive.");
	}
	else
	{		
		executingDirectoryName = Path.GetDirectoryName(stackTraceFileName);
	}	
	return executingDirectoryName;
}

StringBuilder _logBuffer = new StringBuilder();
void Log(string message)
{
	_logBuffer.AppendFormat("- {0}", message);
	_logBuffer.AppendLine();
}

string LogFile(string fileName)
{
	Log(string.Format("Processed Code File: {0}", fileName));
	return fileName;
}

string WriteLog()
{
	return _logBuffer.ToString();	
}

string GetLogFileName()
{
	return string.Format("__Log.{0}", Path.GetFileName(Path.ChangeExtension(Host.TemplateFile, "txt")));
}
#>
