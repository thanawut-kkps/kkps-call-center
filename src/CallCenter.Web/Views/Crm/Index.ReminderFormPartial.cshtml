@model ReminderViewModel
@{
    var stringCaption = string.Empty;
    if (Model.ReminderId.HasValue)
    {
        if (IsCancelled())
        {            
            stringCaption = "View Cancelled Reminder";
        }
        else if (IsReminded())
        {
            stringCaption = "View The Reminded";
        }
        else
        {
            stringCaption = "Edit Reminder";
        }

    }
    else
    {
        stringCaption = "Add Reminder";
    };

}
@functions{    

    private bool IsCancelled()
    {
        return Model.IsCancelled.HasValue && Model.IsCancelled.Value;
    }

    private bool IsReminded()
    {
        return Model.RemindDate.HasValue && Model.RemindDate.Value < DateTime.Now.Date;
    }
}
@using (Html.BeginForm("SaveReminder", "Crm", FormMethod.Post))
{ 
    @Html.HiddenFor(m => m.ReminderId) 
    @Html.HiddenFor(m => m.CustomerPhone) 
    @Html.HiddenFor(m => m.ClientId) 
    @Html.HiddenFor(m => m.CallSession) 
    @Html.HiddenFor(m => m.AgentId) 
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="form-dialog-label">
            @stringCaption</h4>
    </div>  
    <div class="modal-body">
        <div class="form-group">
            @Html.LabelFor(m => m.RemindDate)
            <div class="input-group date @(IsCancelled() ? "disabled": string.Empty)" @*data-provide="datepicker"*@>
                @Html.TextBoxFor(m => m.RemindDate, new { @class = "form-control", placeholder = "Enter Reminder Date", Value = Model.RemindDate.ToDisplay() })
                <div class="input-group-addon">
                    <span class="glyphicon glyphicon-th"></span>
                </div>
            </div>
            @Html.ValidationMessageFor(model => model.RemindDate)
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.AccountNo)
            @Html.TextBoxFor(m => m.AccountNo, new { @class = "form-control crm-accountno", placeholder = "Account No" })
            @Html.ValidationMessageFor(model => model.AccountNo)
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Details)
            @Html.TextAreaFor(m => m.Details, new { @class = "form-control full-width", placeholder = "Details", rows = "4" })
            @Html.ValidationMessageFor(model => model.Details)
        </div>
        @if (Model.ReminderId.HasValue)
        {
            <div class="form-inline">
                <div class="form-group">
                    <strong>Created by</strong>
                    @Model.CreatedUser
                    <strong>Time</strong> @(Model.CreatedDate.HasValue ? Model.CreatedDate.Value.ToString("d-MMM-yyyy H:mm") : string.Empty)
                </div>
                <div class="form-group">
                    <strong>@(IsCancelled() ? "Cancelled by" : "Last Updated By")</strong>
                    @Model.UpdatedUser
                    <strong>Time</strong> @(Model.UpdatedDate.HasValue ? Model.UpdatedDate.Value.ToString("d-MMM-yyyy H:mm") : string.Empty)
                </div>
            </div>
        }
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">
            Close</button>
        @if (!IsCancelled() && !IsReminded())
        {
            <button type="button" class="btn btn-primary" onclick="onSaveReminder(this)">
                Save</button>                
        }
    </div>
}
